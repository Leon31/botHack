// var arrOfQuest[
//    {
//      "quest":"Can you compelte the sentence?\n Context is the thing on the left of the dot...",
//      "title":["com", "dont know", "at the call site"]
//      "payload": ["context "false"", "context "false"", ""true""]
//    }
//  ]

 [
  { quest: 'JavaScript is …',
    title: [ 'subjective', 'objective', 'evil', 'object based' ],
    payload: [ '"false"', '"false"', '"false"', '"true"' ] },
  { quest: 'var obj1 = {}; var obj2 = {}; What is the value of (obj1 === obj2)',
    title: [ '"true"', '"false"' ],
    payload: [ "false", "true" ] },
  { quest: 'What does the following expression return? 1 + 5 + ” bottles of milk”;',
    title:
     [ '“15 bottles of milk”',
       '“6 bottles of milk”',
       'undefined. An exception is thrown',
       '“5 bottles of milk”' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'How do you create an object in JavaScript?',
    title:
     [ 'var obj = {};',
       'function Foo() {} var obj = new Foo();',
       'All of these work.',
       'var obj = new Object();' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What is the result of the following statement: typeof “x”;',
    title:
     [ '“character”',
       '“[object String]”',
       'Throws error “ReferenceError: x is not defined”',
       '“string”',
       '“undefined”' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'Primitive types are passed by :',
    title: [ 'Value', 'Pointer', 'Reference' ],
    payload: [ "true", "false", "false" ] },
  { quest: 'Which is not a primitive data type in JavaScript?',
    title: [ 'boolean', 'number', 'string', 'character' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'Which of these is a correct method to create a new array?',
    title:
     [ 'var myArray = ();',
       'var myArray = [];',
       'var myArray = new Array[];',
       'var myArray = {};',
       'var myArray = array();' ],
    payload: [ "false", "true", "false", "false", "false" ] },
  { quest: 'To what type are values converted internally when evaluating a conditional statement?',
    title: [ 'positive', 'negative', 'integer', 'tinyint', 'boolean' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'Which of these is not a logical operator?',
    title: [ '!', '&', '&&', '||' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'What is the value of x? var a = "false"; var x = a ? “A” : “B”;',
    title: [ 'undefined', '"true"', '“A”', '“B”', '"false"' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'Which of the following variable types does not exist in JavaScript?',
    title: [ 'boolean', 'number', 'object', 'double', 'string' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'How do you write a conditional statement that will *only* execute the contained code if variable x has a value 5 of type *number*?',
    title:
     [ 'if (x == 5) { … }',
       'if x = 5 …',
       'if (x === 5) { … }',
       'if x = 5 then …' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which event fires whenever a control loses focus?',
    title: [ 'onclick', 'onmove', 'onblur', 'onchange' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which of the following invokes a user-defined object constructor function?',
    title:
     [ 'var x = new myConstructor();',
       'var x = create myConstructor();',
       'myConstructor x = create myConstructor();',
       'myConstructor x = new myConstructor();' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'The function call Math.ceil(3.5) returns:',
    title: [ 'Throws a MathError exception.', '4', '0', '3' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'How is an object property referenced?',
    title:
     [ 'myObj(foo)',
       'myObj->foo',
       'myObj<foo>',
       'myObj.foo',
       'myObj[foo]' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'Which of these operators compares two variables by value AND type?',
    title: [ '===', 'None of these', '==', '=' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'How would one declare a string variable?',
    title:
     [ 'Any of these',
       'var fName = “Mary”;',
       'var names = “7”;',
       'var fName = new String;' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'function foo(){ var tmp = ‘one_two_three_four_five’; return tmp.replace(/_/g, ‘+’); } What does foo() return?',
    title:
     [ 'one_two_three_four_five',
       '_______________________',
       'one+',
       'one+two_three_four_five',
       'one+two+three+four+five' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'USERNAME and userName',
    title:
     [ 'Represent the name of the same variable',
       'Represent the name of different variables',
       'Represent the name of different constants',
       'Represent the name of the same constant' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'Which of these could be a correct way to create an instance of Person?',
    title:
     [ 'var Person john = new Person(‘John’, ‘Doe’, 50, ‘blue’);',
       'var john = new Person(‘John’, ‘Doe’, 50, ‘blue’);',
       'new john = Person(‘John’, ‘Doe’, 50, ‘blue’);',
       'Person john = new Person(‘John’, ‘Doe’, 50, ‘blue’);' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'Which is the correct way to write a JavaScript array?',
    title:
     [ 'var names = {0: “Tim”, 1: “Kim”, 2: “Jim”};',
       'var names = {1: “Tim”, 2:”Kim”, 3:”Jim”};',
       'var names = [“Tim”,”Kim”,”Jim”];',
       'var names = array(“Tim”, “Kim”, “Jim”);' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which of the following asserts that the variables \'A\', \'B\', and \'C\' have unequal values?',
    title:
     [ 'A !== B || B !== C',
       'A !== B & B !== C',
       'A !== B && B !== C && A !== C',
       'A !== B' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'The \'else\' statement is ___',
    title:
     [ 'Does not exist, in JavaScript \'or\' and \'then\' are used to specify code to execute for the “"false"” case of the \'if\' statement.',
       'used inside of an \'if\' statement. To specify the code that should execute if the \'if\' condition is no longer "true".',
       'used together with the \'if\' statement to specify the code that should execute when the \'if\' condition is "false".' ],
    payload: [ "false", "false", "true" ] },
  { quest: 'The “if” statement is used to:',
    title:
     [ 'Deal with logic that should execute only when a condition is "false"',
       'Convert an integer value to a boolean',
       'Create a loop that runs as long as a condition is "true"',
       'Deal with logic that should execute only when a condition is "true"' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'String literals are written using:',
    title:
     [ 'Just single quotes: ‘example’',
       'Either double quotes or single quotes: “example” and ‘example’',
       'Just double quotes: “example”' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'How to return the first value of this array? var myArr = [1, 2, 3, 4, 5]; var myVal = …',
    title:
     [ 'myArr[0];',
       'myArr.pop();',
       'myArr[1];',
       'myArr.shift();',
       'myArr.unshift();' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'How does a “while” loop start?',
    title:
     [ 'while i=(1 <> 10)',
       'while i=1 to 10',
       'while (i<=10)',
       'while (i<=10;i++)' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Properties of a RegExp object include:',
    title: [ 'source', 'ignoreCase', 'lastIndex', 'All of these' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'What is the value of the following expression: 8 % 3',
    title: [ '5', '2', '24', 'Other/Error' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'Given the following code, what does myFunc() return? var foo = ‘foo’; var bar = ‘bar’; function myFunc() { return foo + bar; }',
    title:
     [ '“foobar”',
       'NaN',
       '“undefinedundefined”',
       'An error is thrown because of illegal out of scope access.',
       '“foo + bar”' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'Which symbol is not used in logical operations?',
    title: [ '||', '%', '&&', '!' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'How do you round the number 7.25, to the nearest whole number?',
    title:
     [ 'Math.round(7.25)',
       'rnd(7.25)',
       'round(7.25)',
       'Math.rnd(7.25)' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'Which of these will throw a SyntaxError?',
    title:
     [ 'if (x == 1) { }',
       'if (x = 1) { }',
       'if (x ==== 1) { }',
       'if (x === 1) { }' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What is the correct JavaScript syntax to insert a comment that can span multiple lines?',
    title:
     [ '// This comment has mor than one line *//',
       '/ This comment has more than one line /',
       '// This comment has more than one line //',
       '/* This comment has more than one line */' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'JavaScript supports dynamic typing, you can assign different types of values to the same variable.',
    title: [ '"true"', '"false"' ],
    payload: [ "true", "false" ] },
  { quest: 'How do you define a function called “fName”?',
    title:
     [ 'function fName: { }',
       'func fName = function () {}',
       'function fName() { }',
       'new fName = { }',
       'None of these' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'How do you check what the type of a value in variable x is?',
    title: [ 'gettype(x);', 'x.__type;', 'Object.type(x);', 'typeof(x);' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'Which of the following is not a reserved word?',
    title: [ 'throw', 'void', 'program', 'return' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which keyboard character represents the assignment operator?',
    title: [ '!', '?', '#', ':', '=' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'Which of the following is a valid function definition?',
    title:
     [ 'function myFunc(arg1,arg2) { }',
       'func myFunc = (arg1 as string, arg2 as int) { }',
       'function myFunc(arg1, arg2):' ],
    payload: [ "true", "false", "false" ] },
  { quest: 'String concatenation…',
    title:
     [ 'is the splitting of a String into two or more Strings',
       'Is a complex String',
       'Is the combination of two or more text Strings',
       'Is an elemental String' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What is the value of (“dog”.length)?',
    title: [ '4', '3', '2' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'What is the value of x? var a = “A”; var x = a.concat(“B”);',
    title: [ '“B”', '“A”', '“AB”', '[“A”, ” B”];' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which is NOT a way to create a loop in javascript?',
    title:
     [ 'for (…) { }',
       'do { } while(…)',
       'while (…) { }',
       'repeat (…) { }' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'In an array object, what is the key of the first value?',
    title: [ '0', '$', '1', '-1', '100' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'Which statement loops through an array?',
    title:
     [ 'for (i < myArray.length; i++)',
       'for (i = 0; i <= myArray.length;)',
       'for (var i=0; i < myArray.length; i++)' ],
    payload: [ "false", "false", "true" ] },
  { quest: 'Where do you use the “break” statement?',
    title:
     [ 'To divide (or “break”) a mathematical value in half.',
       'To add a value to an array.',
       'To delete a (global) variable.',
       'To terminate an Object statement.',
       'To terminate a switch statement, loop, or labeled block.' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'The var statement is used to:',
    title:
     [ 'Create a new local variable',
       'Retrieve a variable descriptor',
       'Declare a member of a class',
       'Change a constant' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'What does the “break” statement do?',
    title:
     [ 'Cancels the current event.',
       'Aborts the current function.',
       'Aborts the current loop or switch statement.',
       'Simulates a JavaScript crash.' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What character ends a javascript statement?',
    title:
     [ 'An exclamation mark “!”.',
       'A semicolon “;”.',
       'A period “.”.',
       'A colon “:”.' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'Which of the following primitive values exist in JavaScript?',
    title: [ 'boolean', 'string', 'number', 'All of these' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'Are variable identifiers case-sensitive?',
    title: [ 'No', 'Yes' ],
    payload: [ "false", "true" ] },
  { quest: 'Which of the following declares a variable with a value of string type?',
    title:
     [ 'var string myVar = “This is a string”;',
       'var myVar = “This is a string”;',
       'string myVar = “This is a string”;' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'You use the Math.pow() method to:',
    title:
     [ 'Return any number',
       'Return a number raised to the power of a second number',
       'Return a random value between 0 and 1',
       'Return a variable value' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'What keyword is used to begin a conditional statement?',
    title: [ 'when', 'how', 'if', 'condition' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What character combination is used to create a single line comment?',
    title: [ '!!', '—', '$$', '//' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'Java script start with……',
    title: [ 'Do_script', 'Start_script', '<script>', '<scr>' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'var a = ‘011’; parseInt(a); will return:',
    title: [ '11', '0', '9', 'error' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'null === undefined',
    title: [ '"true"', '"false"' ],
    payload: [ "false", "true" ] },
  { quest: 'What is the value of the array myArr after execution of the following code: var myArr = [1,2,3,4,5]; myArr.shift();',
    title: [ '[1,2,3,4,5]', '[]', '[2,3,4,5]', '[1,2,3,4]' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What does isNaN() do?',
    title:
     [ 'Only returns "true" if the argument is not a number',
       'Converts a non-numeric value to a number.',
       'Throws an error if a conditional statement is "false".' ],
    payload: [ "true", "false", "false" ] },
  { quest: 'Properties of objects may be accessed using…',
    title:
     [ 'the dot notation in JavaScript.',
       'none of these',
       'the redirect notation in JavaScript.' ],
    payload: [ "true", "false", "false" ] },
  { quest: 'What keyword is used to define the alternative path to take in a conditional statement?',
    title: [ 'or', 'else', 'altenative', 'next' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'What is the difference between a while loop and a do…while loop?',
    title:
     [ 'The code inside a do…while loop will always be executed at least once, even if the condition is "false".',
       'The code inside a while loop will always be executed at least once, even if the condition is "false".',
       'There is no difference between them.' ],
    payload: [ "true", "false", "false" ] },
  { quest: 'Which of these descriptors applies to JavaScript?',
    title:
     [ 'Loosely typed, values of any type can be assigned to any variable.',
       'Strongly typed, variables are declared with a type, and you can not assign another type to the variable.' ],
    payload: [ "true", "false" ] },
  { quest: 'What operator is used for string concatenation?',
    title: [ '.', '+', 'All of these', '&' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: '(function( ) { var x = foo( ); function foo( ){ return “foobar” }; return x; })( ); What does this function return?',
    title:
     [ 'TypeError: undefined is not a function',
       '“foobar”',
       'ReferenceError: foo is not defined',
       'undefined',
       'foo( )' ],
    payload: [ "false", "true", "false", "false", "false" ] },
  { quest: 'Which of the following is a JavaScript comment?',
    title:
     [ 'comment',
       '<!– comment –>',
       '// comment',
       '\\ comment',
       '# comment' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'What is the difference between == and === ?',
    title:
     [ 'The == is used in comparison, and === is used in value assignment.',
       'The == operator converts both operands to the same type, whereas === returns "false" for different types.',
       'The === is deprecated, and now they are exactly the same.' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'A for loop is written as such: “for (first property; second property; third property) {…}” What does the third property represent?',
    title:
     [ 'An action to take at the end of the current loop cycle',
       'A condition to check at the beginning of a loop cycle',
       'An action to take at the beginning of the loop cycle' ],
    payload: [ "true", "false", "false" ] },
  { quest: 'What is the value of a : var a = 3; var b = 2; var c = a; var a=b=c=1;',
    title: [ '3', '"true"', '1', '"false"', '2' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'Which of the following orders can be performed with the Array prototype “sort()” callback?',
    title:
     [ 'Ascending alphabetical',
       'Descending alphabetical',
       'ASCII ordering',
       'All of these' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'When an array index goes out of bounds, what is returned?',
    title:
     [ 'undefined',
       'An error to the browser',
       'Moderate',
       'the first or last value in the array',
       'A default value, like 0' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'Which of the following is the equivalent of the following. if (a) { x = b; } else { x = c; }',
    title: [ 'x = a : b ? c;', 'x = a ? b : c;', 'x = a ? b , c;' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'Which message does the following log to the console? bar(); function bar() { console.log(‘bar’); }',
    title: [ 'undefined', 'TypeError', 'SyntaxErrror', '“bar”' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'Which is the correct syntax to write array literals in JavaScript?',
    title:
     [ 'var x = [“blank”,”blank”,”blank”];',
       'var x = array(“blank”, “blank”, “blank”);',
       'var x = {“blank”,”blank”,”blank”};',
       'var x = new Array(1:”blank”,2:”blank”,3:”blank”)' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'What is the value of x? var obj = {}; obj[“function”] = 123; x = obj.function;',
    title:
     [ 'native Function constructor',
       '123',
       'undefined. Silent failure.',
       'undefined. SyntaxError due to illegal position of a reserved word' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'Which of the following operators can assign a value to a variable?',
    title: [ 'All of these', '=', '%=', '+=' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'In JavaScript, to call a function directly, you use:',
    title:
     [ 'function_expression -> ( arguments_if_any )',
       'function_expression { arguments_if_any }',
       'arguments_if_any ( function_expression )',
       '( arguments_if_any ) -> function_expression',
       'function_expression ( arguments_if_any )' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'How do you assign object properties?',
    title:
     [ 'obj(age) = 25 OR obj.age = 25',
       'obj[“age”] = 25 OR obj.age = 25',
       'obj.age = 25 OR obj(@”age”) = 25' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'What is the value of x? var x = ‘1’+2+3;',
    title: [ '6', '15', '“123”', 'The statement generates an error.' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which of the following is an Error object constructor?',
    title: [ 'EvalError', 'All of these', 'Error', 'RangeError' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'var a = {1:’one’,2:’two’,3:’three’}; var b = Object.keys(a); What’s the value of b?',
    title:
     [ 'An array with all of the distinct keys from the obj a',
       'An obj with autowired getters and setters for it’s key/values',
       'A serialized copy of the obj a',
       'none of the above' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'How do you assign an anonymous function to a variable?',
    title:
     [ 'var anon = new Function () { };',
       'var anon = function() { };',
       'var anon = func() { };',
       'var anon = func({});' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'How do you find the number with the highest value of x and y?',
    title:
     [ 'Math.max(x, y)',
       'ceil(x, y)',
       'max(x, y)',
       'top(x, y)',
       'Math.ceil(x, y)' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'What is the RegExp object constructor used for?',
    title:
     [ 'Match text against regular expressions',
       'Provides access to Windows registry express values',
       'Regulates the expression of variables',
       'Registers experienced functions with the DOM',
       'Switches numerical notation to exponential' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'Which of these is not a JavaScript statement?',
    title:
     [ 'throw',
       'None, these are all valid statements.',
       'continue',
       'break' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'var data = [“A”, “B”, “C”, “D”]; data.unshift(“X”); data.push(“Y”); What does data look like?',
    title:
     [ '[“A”, “B”, “C”, “X”, “D”, “Y”]',
       '[“X”, “Y”, “A”, “B”, “C”, “D”]',
       '[“X”, “A”, “B”, “C”, “D”, “Y”]',
       '[“A”, “B”, “C”, “D”, “X”, “Y”]',
       '[“Y”, “A”, “B”, “C”, “D”, “X”]' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'The _______ operator returns a string that identifies the type of its operand.',
    title: [ 'TypeOf', 'typename', 'Type', 'typeof', 'getType' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'The “exploit” property:',
    title:
     [ 'Represents a variable',
       'Is a very important property',
       'Is obsolete',
       'Does not exist in JavaScript' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'JavaScript is an implementation of the ______ language standard.',
    title: [ 'VBScript', 'ActionScript', 'ECMAScript', 'HTML' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which has the correct syntax of a ternary operation?',
    title:
     [ 'var x = ( y === "true" ) { “"true"” : “"false"” };',
       'var x = y === "true" ? “"true"” : “"false"”;',
       'var x = y === "true" : “"true"” ? “"false"”;',
       'var x = ( y === "true" ) : “"true"” ? “"false"”;' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'What is the name of the String prototype that appends the given string to the base string and returns the new string?',
    title:
     [ '“x”.combine(“foo”)',
       '“x”.match(“foo”)',
       '“x”.add(“foo”)',
       '“x”.concat(“foo”)',
       'None of these does that and/or such method doesn’t exist in javascript!' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'What will calling the below test function log to console? function test(){ console.log(a); var a = ‘hello’; console.log(a); }',
    title:
     [ 'ReferenceError: a is not defined',
       'ReferenceError: a is not defined, “hello”',
       '“”, “hello”',
       'undefined, “hello”' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'Functions in javascript are always ..',
    title: [ 'in the global scope', 'loops', 'objects', 'operators' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'If a function doesn’t explicitly use the “return” operator, what will the return value be when the function is invoked?',
    title: [ 'null', 'undefined', '"false"', 'closure', 'NaN' ],
    payload: [ "false", "true", "false", "false", "false" ] },
  { quest: 'Which of the following have special meanings within the language syntax?',
    title: [ 'Variables', 'Literals', 'Reserved words', 'Identifiers' ],
    payload: [ "false", "false", "true", "false" ] },
    { quest: 'Given a variable named stringVar with a string value, what does the following do? stringVar.toUpperCase();',
    title:
     [ 'Return a copy of stringVar with all letters in uppercase',
       'Return the number of characters in the stringVar variable',
       'Evaluate any string expression in stringVar',
       'Alters stringVar, changes all letters to uppercase' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'How do you declare a function?',
    title:
     [ 'function doSomething() {}',
       'all of these',
       'function=doSomething() {}',
       'function:doSomething() {}' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'Which of the following is a way to add a new value to the end of an array?',
    title:
     [ 'arr[value] = length;',
       'arr.length = value;',
       'arr[arr.length] = value;',
       'arr[arr.length()] = value;' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which of the following is the syntax for an object literal (with no properties)?',
    title: [ 'nil;', '[];', '();', '{};', 'object;' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'What are curly braces (“{” and “}”) used for?',
    title:
     [ 'Parsing JSON',
       'Defining a class',
       'Block declarations and object literals',
       'Setting attributes',
       'Invoking a function' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'What is the value of x? var x = 2 + “2”;',
    title: [ '22', '4', '“22”', '“4”' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What is result of the following expression: var a = “test”; console.log(!!a);',
    title: [ 'SyntaxError', '"false"', '"true"', 'undefined' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which of the following is not a method in the “JSON” object according to the ECMAScript specification?',
    title: [ 'JSON.stringify', 'JSON.fromString', 'JSON.parse' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'What is the result? 0 == “”',
    title: [ 'Error: type mismatch', '"true"', '"false"' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'What is the value of c? var a = function(){ this.b = 1; } var b = function(){ var b = new a().b; return 5 + b; } var c = b();',
    title:
     [ '5',
       'null',
       '6',
       'undefined',
       'Error thrown when running the code' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'How can you concatenate multiple strings?',
    title:
     [ 'Both of these',
       '‘One’ + ‘Two’ + ‘Three’',
       '‘One’.concat(‘Two’, ‘Three’)' ],
    payload: [ "true", "false", "false" ] },
  { quest: 'When writing an object literal, what is used to separate the properties from each other?',
    title:
     [ 'a semicolon “;”',
       'a full-stop “.”',
       'a colon “:”',
       'a comma “,”',
       'an underscore “_”' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'What is the result of the following statement: 0 == “”;',
    title: [ 'Throws Error, invalid comparison', '"false"', 'null', '"true"' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'Every object is linked to a _________ object from which it can inherit properties.',
    title: [ 'argument', 'sibling', 'parent', 'prototype' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'What does “2” + 3 + 4 evaluate to?',
    title: [ '9', '’27’', '‘234’' ],
    payload: [ "false", "false", "true" ] },
  { quest: 'Consider this code: var x = [‘Hello’]; What value will ‘x[1]’ return?',
    title: [ '“Hello”', 'null', 'undefined', '[‘Hello’]', 'NULL' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'var x = “foo”; x = !!x; What is the value of x?',
    title: [ '“!!foo”', '"true"', 'undefined', 'NaN' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'Which is an example of (only) an object literal in Javascript?',
    title:
     [ 'var obj = { prop1: ‘property 1’, prop2: ‘property 2’ };',
       'var obj = [ “property 1”, “property 2” ]',
       'var obj = [ {prop1: ‘property 1’, prop2: ‘property2’} ]',
       'var obj = new Object() { this.prop1 = ‘property 1’; this.prop2 = ‘property 2′; }' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'What is the value of \'x\' after the following? var x = “hello”; (function() { x = “goodbye”; }());',
    title: [ 'undefined. A SyntaxError is thrown', '“goodbye”', '“hello”' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'Is there a value type for individual string characters?',
    title:
     [ 'No, there is only type “string” for characters.',
       'Yes, accessing a character offset from a (non-empty) string will yield a value of type “char”.' ],
    payload: [ "true", "false" ] },
  { quest: 'split() is a method of which constructors’ prototype?',
    title:
     [ 'String.prototype',
       'None of these',
       'Number.prototype',
       'Array.prototype' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'What is the value of x? function foo(y) { var z = 10; z = 7; }; var x = foo(“bar”);',
    title: [ 'undefined', '7', '10', '“bar”', 'null' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'Math.random() returns..',
    title:
     [ 'a random number between 0 and 1',
       'a random number that can be any value',
       'a random number between 0 and 100',
       'a random number between 0 and 1000' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'How can you get the number of characters in a string ?',
    title:
     [ '“1234567”.Length()',
       '“1234567”.Length',
       '“1234567”.getLength()',
       '“1234567”.length',
       '“1234567”.length()' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'What is the result of the following expression? ({“foo”: "true"}).foo;',
    title: [ 'undefined', '4', '"false"', 'SyntaxError', '"true"' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'In the loop, “for (first clause; second clause; third clause) { statements; }” What does the second clause represent?',
    title:
     [ 'A condition to check at the beginning of each loop cycle',
       'Code to execute once, after the loop has ended',
       'A condition to check at the end of each loop cycle',
       'Code to execute once, before the loop starts' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'What will invoking \'foo\' return? function foo() { var x = 10; x = 7; };',
    title: [ '7', '10', 'undefined', 'null', 'foo' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'The “this” keyword refers to …',
    title:
     [ 'function currently being executed.',
       'parent object that hosts the current function.',
       'current execution context (could be any value).' ],
    payload: [ "false", "false", "true" ] },
  { quest: 'Given the following code, what is the value of x? var x = [‘foo’, ‘bar’]; x.length = 1;',
    title:
     [ '[]',
       '[“foo”]',
       '[“bar”]',
       '[“foo”, “bar’, 1]',
       '[“foo”, “bar”]' ],
    payload: [ "false", "true", "false", "false", "false" ] },
  { quest: '‘&’ Operator is _____',
    title:
     [ 'a bitwise operator',
       'an assignment operator',
       'an operator used in conditionals',
       'a displacement bit operator' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'var x = Math.ceil(10.126); What is the value of x?',
    title:
     [ 'An error, because it was called incorrectly',
       '11',
       '10',
       '10.13' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'The length property of an Array object is always:',
    title:
     [ 'equal to the highest index of that object',
       'equal to the number of properties in that object',
       'equal to the highest index of that object + 1' ],
    payload: [ "false", "false", "true" ] },
  { quest: 'Which fact is "true" about the keyword “default”?',
    title:
     [ 'It does not exist in JavaScript',
       'It branches program logic based on the value of a condition',
       'It catches any case clauses not caught by case statements within a switch statement',
       'It sets up one variable to check against multiple values' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Infinity * null will return :',
    title: [ 'NaN', 'null', 'Infinity' ],
    payload: [ "true", "false", "false" ] },
  { quest: 'What is the value of x after the following statement? var x = 1 == ‘1’;',
    title: [ '"false"', 'undefined', '"true"', '‘1’', '1' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'What is the end value of myAddedVar with the following code: var myVar = ‘5’; var myAddedVar = myVar + 10;',
    title:
     [ 'NaN',
       '‘510’',
       '15',
       '510',
       'Nothing, the code will result in an error.' ],
    payload: [ "false", "true", "false", "false", "false" ] },
  { quest: 'Which of the following types does NOT exist in javascript?',
    title: [ 'number', 'boolean', 'object', 'integer', 'string' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'What does null, undefined, “string”, 20, "true" and "false" have in common?',
    title:
     [ 'they are primitive values',
       'they are objects',
       'they are functions',
       'they have the same instance properties' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'What is the value of x? var x = typeof new String(“abc”);',
    title: [ 'object', 'string', 'undefined' ],
    payload: [ "true", "false", "false" ] },
  { quest: 'var y = 3, x = y++; What is the value of x?',
    title: [ '3', '4', '5', '2', '6' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'How do you read the first character in a string?',
    title:
     [ 'data.charAt(0);',
       'data.slice(1)',
       'data.substr(0);',
       'data.charAt(1);',
       'data.substring(1);' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'What is the value of x? var x = typeof null;',
    title: [ '“object”', '“null”', 'null', 'undefined' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'var data = [1, 2, 3, 4, 5, 6]; data.shift(); What does data look like?',
    title:
     [ '[undefined, 2, 3, 4, 5, 6]',
       '[6, 1, 2, 3, 4, 5]',
       '[2, 3, 4, 5, 6]',
       '[undefined, 1, 2, 3, 4, 5]',
       '[1, 2, 3, 4, 5]' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'What is the type of \'null\', according to the \'typeof\' operator?',
    title: [ '“undefined”', '“object”', '“array”', '“null”' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'How would you iterate over the following object? var my_data = {a: ‘Ape’, b: ‘Banana’, c: ‘Citronella’};',
    title:
     [ 'None of these. One can only iterate over arrays, not objects.',
       'foreach (my_data as key => value) {}',
       'for (var key in my_data) {}',
       'for (var i = 0; i < my_data.length; i++) {}' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What character combination is used to alter the order of operations by grouping expressions?',
    title: [ '( )', '[ ]', '< >', '{ }' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'What does this line do? variable++;',
    title:
     [ 'Returns a value 1 greater than “variable” without changing its value',
       'Returns an error to the browser',
       'Increments the value of “variable” and returns the new value',
       'Adds the value of “variable” to itself',
       'Increments the value of “variable” but returns the previous value' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'Which Object method takes a \'propertyName\' parameter and returns \'"true"\' if the object contains an uninherited property with that key?',
    title:
     [ 'obj.exists(‘propertyName’);',
       'obj.hasProperty(‘propertyName’);',
       'obj.doesPropertyExist(‘propertyName’);',
       'obj.hasOwnProperty(‘propertyName’);',
       'obj.contains(‘propertyName’);' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'var a = new Boolean("false"); What is (typeof a)?',
    title: [ '‘"false"’', '‘primitive’', '‘number’', '‘object’', '‘boolean’' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'What’s the difference between the “var” keyword and the new “let” keyword which appears in ECMAScript 6 ?',
    title:
     [ 'The “let” declares a local value to a block scope whereas the “var” defines a variable more globally',
       'The “let” was introduced only to deal with for() loops because it’s faster than a “var” in that case',
       'The “let” allows programmers to do variables assignment by “destructuring”',
       'The “let” is the new “var”. It’s faster to create and initialize variables in the computer' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'Does NaN equal itself?',
    title:
     [ 'No, when trying to compare it against itself, an exception is thrown.',
       'Yes, just like 123 is equal to (==) 123, NaN is equal to NaN.',
       'No, NaN does not equal itself (== comparison would return "false").' ],
    payload: [ "false", "false", "true" ] },
  { quest: 'What is the value of x after the following code is executed? var x = 0; x = x++;',
    title: [ '1', '0' ],
    payload: [ "false", "true" ] },
  { quest: 'Which of these is not a built-in object constructor?',
    title: [ 'Time', 'Date', 'RegExp', 'Array' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'What is the result? “” ? “a” : “b”',
    title: [ '“”', 'Error: “” is not a boolean', '“b”', '“a”' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which of these will invoke a function?',
    title:
     [ 'function.exec(…)',
       'function.invoke(…)',
       'function.Apply(…)',
       'function.Execute(…)',
       'function.apply(…)' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'Given the following code: var myVar = ‘5’; var myAddedVar = myVar + 10; What is the value of (myAddedVar.constructor === Number)?',
    title: [ '"true"', 'NaN', 'Type Error', 'undefined', '"false"' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'function b(x, y, a) { arguments[2] = 10; alert(a); } b(1, 2, 3); What is alerted?',
    title: [ '2', '1', '10', '3' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What is the right way to combine two arrays into a new array? var a = [“a”, “b”, “c”]; var b = [“d”, “e”, “f”];',
    title:
     [ 'var c = a.push() + b.push();',
       'var c = a.join(b);',
       'var c = a.concat(b);',
       'None of these' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which String prototype method is capable of removing a character from a string?',
    title: [ 'delete()', 'remove()', 'replace()', 'destroy()' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What will happen in the console after executing this code? if (“foo”) { console.log(“foo” === "false"); console.log(“foo” === "true"); }',
    title:
     [ '"false" "true"',
       'TypeError : Cannot convert to boolean',
       'NaN NaN',
       '"false" "false"' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'What will the expression a === b return after the following? var a = { “foo”: “bar” }; var b = { “foo”: “bar” };',
    title: [ '"false"', 'undefined', '"true"', 'An exception is thrown.' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'A javascript variable prefixed with a $ is:',
    title:
     [ 'only valid within certain javascript libraries',
       'still valid, but deprecated since Javascript 1.6',
       'valid javascript syntax as any other character',
       'invalid, a common bug introduced by developers coming from PHP or Perl' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What is the difference between using call() and apply() to invoke a function with multiple arguments?',
    title:
     [ 'apply() is identical to call(), except apply() requires an array as the second parameter',
       'apply() is identical to call(), except call() requires an array as the second parameter',
       'apply() is exactly identical to call()',
       'apply() is deprecated in favor of call()' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'You use the Math.tan( ) method to:',
    title:
     [ 'Return the tangent of an angle (in degrees)',
       'Return the tangent of an angle (in gradients)',
       'Return the tangent of an angle (in radians)',
       'Does not exist in JavaScript' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What would this code print out? if (new Boolean("false")) console.log(“"true"”); else console.log(“"false"”);',
    title: [ '"true"', '"false"' ],
    payload: [ "true", "false" ] },
  { quest: 'Which two values are logged by the following code? var x = 5; (function () { console.log(x); var x = 10; console.log(x); }());',
    title:
     [ 'nothing. Throws ReferenceError: x is not defined',
       'undefined 10',
       '5 10',
       '10 10' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'An (inner) function enjoys access to the parameters and variables of all the functions it is nested in. This is called:',
    title: [ 'Prototypal inheritance', 'Lexical scoping' ],
    payload: [ "false", "true" ] },
  { quest: 'Assuming alert displays a string of its argument: var a = 10; function example(){ alert(a); var a = 5; } example(); What will be shown if the preceding code is executed?',
    title: [ 'undefined', 'null', '5', '10' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'var foo = ‘Global’; function fun() { log( foo ); var foo = ‘Local’; log( foo ); } fun(); What the output of the above to log()?',
    title:
     [ 'undefined Local',
       'Global Local',
       'Local Local',
       'Global Global' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'Which are the different ways to affect the “this” reference in a function?',
    title:
     [ 'Direct attribution, e.g. this = x;',
       'Only by invoking a function with the “new” keyword',
       'Invoking a function with the “new” keyword, invoking through the .call() method, invoking through the .apply() method.',
       'the “this” keyword is a global reference that always has the same value.',
       'Only by invoking through the .call() or .apply() method.' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'Which of the following is NOT a valid way to write a loop that will iterate over the values in the array in variable “myArray”?',
    title:
     [ 'for (var i = 0, len = myArray.length; i < len; i++) {}',
       'for (var i = 0; i < myArray.length; i++) {}',
       'var i = 0; for (; i < myArray.length; i++) {}',
       'None of these, they are all valid',
       'for (var i = 0; i < myArray.length; i += 1) {}' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'What is the difference between the two declaration methods below? var functionOne = function() { /* some code */ } function functionTwo() { /* some code */ }',
    title:
     [ 'functionTwo is defined in-place (until that line, functionTwo is undefined), whereas functionOne is hosted to the top of the scope and is available as a function throughout the scope.',
       'No difference, they are treated the same way by the javascript engine. Different syntax to do the same.',
       'functionOne is defined in-place (until that line, functionOne is undefined), whereas functionTwo is hoisted to the top of the scope and is available as a function throughout the scope.',
       'functionOne is not a correct way to define functions' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What is the output? var one; var two = null; console.log(one == two, one === two);',
    title:
     [ '"true" "true"',
       'Error: one is not defined',
       '"false" "false"',
       '"true" "false"',
       '"false" "true"' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'Math.Pi returns the mathematical constant of Pi. What standard JavaScript method would truncate Math.Pi to 3.14 ?',
    title:
     [ 'Math.Round(Math.Pi)',
       'Math.Pi.toPrecision(2)',
       'Math.Pi.toString(“D2”)',
       'Math.Pi.toFixed(2)' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'Which of the following assigned values of x will cause (x == x) to return "false"?',
    title: [ 'NaN', '0/0', 'All of the answers', 'Number(“foo”)' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'When reserved words are used as keys in object literals they must be ______?',
    title:
     [ 'Prefixed with the @ operator',
       'quoted',
       'This is not possible in javascript',
       'escaped' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: '(function() { ‘use strict’; foo = “bar”; })();',
    title:
     [ 'It creates a variable named “foo” in the global object (window)',
       'It enables the JavaScript strict mode and creates a variable named “foo” in the global object (window)',
       'It doesn’t do anything',
       'It throws an error : foo is not defined',
       'It kills your browser' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'What is the value of x.length after running this code? x = [“foo”]; x.quux = “Hello”; x[1] = “bar”;',
    title:
     [ 'Error on last line: index out of bounds',
       'Error on middle line: cannot add properties to Array',
       '2',
       '1',
       '3' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'What is the result of: function foo() { output( “biz ” + bar() ); } bar(); var bar = function() { return “baz”; }',
    title:
     [ 'biz bar',
       'foo baz',
       'baz biz',
       'TypeError: Undefined is not a function',
       'biz baz' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'What does the following return? Number(null);',
    title: [ '0', 'undefined', '1', 'null' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'Evaluate: “10” – (17).toString()',
    title: [ 'Throws Javascript error', '-7', '3', '10125' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'What is the value of x? var x = typeof NaN;',
    title: [ '“number”', '“double”', '“nan”', '“integer”', '“object”' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: '"true" + "true" will return :',
    title: [ '"true"', '2', 'undefined' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'How does JavaScript interpret numeric constants outside of strict mode?',
    title:
     [ 'As hexadecimal if they are preceded by a zero only',
       'As octal if they are preceded by an underscore',
       'As octal if they are preceded by a zero, and as hexadecimal if they are preceded by a zero and “x”',
       'None of these are correct' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'The expression (typeof NaN === “number”) evaluates to:',
    title: [ '"false"', '"true"', 'Throws an Error' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'What is the value of x after the code below is executed? var x = “”; function foo() { x += “foo “; } var bar = function() { x += “bar “; }; foo(); var quux = bar = foo; quux();',
    title: [ '“foo foo ”', '“foo bar”', '“foo bar ”', '“bar ”' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'Object.keys(x)',
    title:
     [ 'Incorrect syntax for using Object.keys.',
       'returns a key that can be used to unlock the object after Object.freeze(x).',
       'returns the enumerable properties of x as an array of strings.',
       'returns all properties of x as an array of strings, including non-enumerable properties.' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What will be in console after executing this code: console.log(1 + ‘1’ – 1);',
    title: [ '1', '‘1’', '‘111’', '10' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'What values will the output function be called with, in the following code: var foo; var bar = { name: “baz”, email: “fiz@example.com”, sendmail: function() { } }; for (foo in bar) { output(foo); }',
    title:
     [ '“baz”, “fiz@example.com”, null',
       '“baz”, “fiz@example.com”, undefined',
       '“name”, “email”',
       'Type Error',
       '“name”, “email”, “sendmail”' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'var x = {}; var foo = function () { this.hello = “Hi”; return this; }; x.bar = foo; What is the value of the following code: x.bar().bar().hello;',
    title:
     [ 'TypeError: Cannot call method ‘bar’ of undefined',
       '“Hi”',
       '“function () { this.hello = “Hi”; return this; }”',
       'TypeError: Object — has no method ‘bar’',
       'undefined' ],
    payload: [ "false", "true", "false", "false", "false" ] },
  { quest: 'How can you remove an element from an array and replace it with a new one ?',
    title:
     [ 'array.overwrite(…)',
       'array.splice(…)',
       'array.switch(…)',
       'array.split(…)',
       'array.replace(…)' ],
    payload: [ "false", "true", "false", "false", "false" ] },
  { quest: 'Which of the following is not a reserved word in the language?',
    title: [ 'and', 'while', 'debugger', 'instanceof' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'Which operator has highest precedence?',
    title: [ '*', '+', '–', '^' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'Which of the following String prototype method takes a regular expression?',
    title: [ 'search()', 'indexOf()', 'charCodeAt()', 'All of these' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'Consider: var x = [‘a’, ‘b’, ‘c’]; Which line of code will remove the first element of the array, resulting in x being equal to [‘b’, ‘c’]?',
    title: [ 'x.unshift(0);', 'x.pop();', 'x.splice(0);', 'x.splice(0, 1);' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'What is the value of x? var x = 10/0;',
    title: [ 'NaN', '0', 'Infinity', 'Runtime exception' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What will: typeof typeof(null) return?',
    title: [ 'string', 'null', 'empty', 'Number', 'error' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'What will the console log when running this code? Function.prototype.a = 1; var a = new Function(); a.prototype.a = 2; var c = new a(); console.log(a.a , c.a);',
    title:
     [ '1 1',
       'Error thrown when running the code',
       '2 1',
       '2 2',
       '1 2' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'What will be printed to the console as a result of this code? var printName = function() { console.log(‘Matt’); printName = function() { console.log(‘James’); }; }; var copy = printName; printName(); copy();',
    title: [ 'James Matt', 'Matt James', 'James James', 'Matt Matt' ],
    payload: [ "false", "false", "false", "true" ] },
    { quest: 'What will be printed to the console as a result of this code? var printName = function() { console.log(‘Matt’); printName = function() { console.log(‘James’); }; }; var copy = printName; printName(); copy();',
    title: [ 'James Matt', 'Matt James', 'James James', 'Matt Matt' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'What will be the result of this expression: void 0',
    title: [ 'undefined', 'null', 'TypeError', 'SyntaxError' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'Whats the output of the below : for(var i = 0; i < 10;i++){ setTimeout(function(){console.log(i) }, 10)}',
    title:
     [ '0 1 2 3 4 5 6 7 8 9',
       '10 10 10 10 10 10 10 10 10 10',
       '10 10 10 10 10 10 10 10 10',
       'Error' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'What is the value of x? var z = [typeof z, typeof y][0]; var x = typeof typeof z;',
    title: [ '“array”', '“string”', '“object”', '“undefined”' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'Evaluate: undefined + 2',
    title: [ '2', 'undefined', 'NaN', 'Type Error' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Evaluate: new Boolean(new Boolean("false")).valueOf()',
    title:
     [ '"true"',
       '(Instance of object Boolean with valueOf "false")',
       'undefined',
       'Type Error',
       '"false"' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'console.log( typeof [1,2] ) will print out:',
    title: [ 'array', 'object', 'string', 'number', 'undefined' ],
    payload: [ "false", "true", "false", "false", "false" ] },
  { quest: 'function Question() { this.answered = "false"; } Question.prototype.rightAnswer = 5; console.log( new Question().rightAnswer, Question.rightAnswer ); What gets printed to the console?',
    title: [ '5 undefined', 'undefined undefined', 'undefined 5', '5 5' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'After the following code: var a = function(){ this.b = 1; this.deleteMe = function(){ delete this; } }; var c = new a(); c.deleteMe(); What is the value of (String(c))?',
    title:
     [ 'Error thrown',
       '(empty)',
       'null',
       '[object Object]',
       'undefined' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'function foo(){ var tmp = ‘one_two_three_four_five’; return tmp.replace(‘_’, ‘+’); } What does foo() return?',
    title:
     [ 'one+two_three_four_five',
       'one_two_three_four_five',
       'one+',
       'one+two+three+four+five',
       'one_' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'What will we see in the console after the following code run: var a = ‘Bolt’; function f() { if (!a) { var a = ‘Nut’; } console.log(a); } f(); console.log(a);',
    title:
     [ '‘Nut’ and ‘Nut’',
       '‘Bolt’ and ‘Bolt’',
       '‘Nut’ then ‘Bolt’',
       '‘Bolt’ then ‘Nut’' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What will be the value of result? function foo(bar) { return bar ? bar == foo : foo(foo); } var result = foo();',
    title:
     [ 'Function won’t work due to incorrect syntax',
       'Function will end up in infinite loop',
       'Value will be null',
       '"true"',
       '"false"' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'What are the values of x and y after the invocation of \'foo\' in following? var x = “I am global x”; var y = “I am global y”; function foo() { var y = x = “Hello from foo”; } foo();',
    title:
     [ 'x = “I am global x”; y = “I am global y”;',
       'The function throws a SyntaxError',
       'x = “Hello from foo”; y = “I am global y”;',
       'x = “Hello from foo”; y = “Hello from foo”;' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Which of these will create a copy of an array such that changes to the old array will not be reflected in the new array?',
    title:
     [ 'var newArray = oldArray;',
       'var newArray = new Array(oldArray);',
       'var newArray = oldArray.slice(0);',
       'var newArray = [oldArray];' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'Given the following code, what will myFunction(123, "false", “test”) return? function myFunction(param) { return arguments[1] || param; }',
    title: [ '"false"', '“test”', '123', '"true"', 'undefined' ],
    payload: [ "false", "false", "true", "false", "false" ] },
  { quest: 'var q = null; q++; What is q?',
    title: [ 'Type Error', 'null', 'NaN', '1' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'Math.min() < Math.max(); will return',
    title: [ 'undefined', '"false"', 'null', '"true"' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'var x = { foo: “A” }; x.constructor.prototype.foo = “B”; var y = {}; console.log(x.foo); console.log(y.foo); Which two values will be logged?',
    title:
     [ '“A” “A”',
       '“A” “B”',
       '“B” “B”',
       '“B” undefined',
       '“A” undefined' ],
    payload: [ "false", "true", "false", "false", "false" ] },
  { quest: 'What is the output of the following? var x = 1; console.log(x++ + ++x + x);',
    title: [ '3', '4', '7', '6' ],
    payload: [ "false", "false", "true", "false" ] },
  { quest: 'What is the value of x after the following code is run? var obj = { 0: ‘who’, 1: ‘what’, 2: ‘idontknow’}; var x = 1 in obj;',
    title:
     [ '“what”',
       '"true"',
       'undefined',
       '“who”',
       'Nothing, the code throws a syntax error' ],
    payload: [ "false", "true", "false", "false", "false" ] },
  { quest: 'What does Math.random() do?',
    title:
     [ 'Returns a random number more than 0 and less than 1.',
       'Randomly put numbers in descending and ascending order',
       'Randomly selects a number 1-10.',
       'Returns a random number more than 0 up to and including 1.',
       'Returns a random number from and including 0 to less than 1.' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'What is the value of mike after this code is run? function Person(name, age) { this.name = name; this.age = parseInt(age, 10); } var mike = Person(‘Mike’, ’25’);',
    title:
     [ '{ name: ‘Mike’, age: ’25’ }',
       'This code won’t run. It throws a SyntaxError.',
       'null',
       'undefined',
       '{ name: ‘Mike’, age: 25 }' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: '“bar”.split().length returns:',
    title: [ '3', '1', '2', 'throws an error' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'What value is passed to function “foo” as first argument? foo( +”5″ );',
    title: [ '5', '0', 'NaN', '“5”', '“05”' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'console.log(1 + +”2″ + “2”)',
    title: [ 'Error', '122', '“122”', '32' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'What will this code produce: +new Date()',
    title:
     [ 'Unix timestamp in milliseconds (UTC timezone)',
       'The Unix epoch (1970-01-01 00:00:00)',
       'Unix timestamp in milliseconds (Local timezone)',
       'A SyntaxError' ],
    payload: [ "true", "false", "false", "false" ] },
  { quest: 'function foo() { this = “foo”; } var a = foo(); What will the preceding code produce?',
    title:
     [ 'ReferenceError: Invalid left-hand side in assignment',
       '“undefined”',
       'SyntaxError: Unexpected token',
       'undefined',
       '“foo”' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'What is the value of a after executing the following: var a = [1, 2, 3]; a.splice(1, 2, 3);',
    title:
     [ '[1, 2, 3, 1, 2, 3]',
       '[ ]',
       '[1, 2, 3, 2, 3]',
       '[1, 3]',
       '[1, 2, 3]' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'Evaluate the following expression: ~-(2 + “2”)',
    title: [ '22', '21', '23', '"true"', '-22' ],
    payload: [ "false", "true", "false", "false", "false" ] },
  { quest: 'Math.log(x) returns:',
    title:
     [ 'Logarithm base 2 of x.',
       'Logarithm base 8 of x.',
       'Logarithm base 10 of x.',
       'Logarithm base e (Euler’s number) of x.' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'Object(“s”) instanceof String === “s” instanceof String',
    title: [ '"false"', '"true"' ],
    payload: [ "true", "false" ] },
  { quest: 'What will the following code, when evaluated, do? var void = function () {};',
    title:
     [ 'Create a local variable named “void” but stays undefined due to a SyntaxError.',
       'Throw a SyntaxError',
       'Assign an anonymous function to variable named “void”' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'Which of the following expressions evaluates to "false"?',
    title:
     [ 'new Boolean(‘"false"’) == "false"',
       'new Boolean(0) == 0',
       'new Boolean(‘"true"’) == "true"',
       'new Boolean(1) == 1',
       'They’re all evaluate to "true"' ],
    payload: [ "true", "false", "false", "false", "false" ] },
  { quest: 'What is the value of c? var a = function(){ this.b = 1; } var b = function(){ this.b = new a().b; return 5; } var c = b() + new b();',
    title: [ '1', '6', '[object]', 'Error thrown when running the code', '5' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'Which of the following Array prototype method actually modifies the array it’s been called on?',
    title: [ 'concat()', 'slice()', 'all of them', 'splice()' ],
    payload: [ "false", "false", "false", "true" ] },
  { quest: 'What does the following return? Math.max();',
    title: [ 'null', '-Infinity', 'Infinity', '0' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'var obj1 = {}; var obj2 = {}; What are the value of the below: !!(obj1 && obj2) (obj1 && obj2)',
    title: [ '"false" "true"', '"true" {}', '"true" fasle', '{} "false"' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'What is the value of “x” after the following code runs? var x; x++;',
    title:
     [ '1',
       'Throws a TypeError on the “x++;” statement',
       '0',
       'NaN',
       'undefined' ],
    payload: [ "false", "false", "false", "true", "false" ] },
  { quest: 'In JavaScript (ES5) Oriented-Object Programming, is it possible to have a member property of a constructor function to a private state ?',
    title:
     [ 'No, because JavaScript is not really Object-Oriented and doesn’t have the \'private\' and \'static\' keywords like others OOP languages',
       'Yes, by creating a local variable inside your constructor. Moreover, this will allow the methods created in the prototype to access this “private-like” property',
       'Yes, by using the \'private\' keyword before declaring your member property',
       'No, it’s actually not possible because every member you will define inside the constructor will be accessible from the outside',
       'Yes, by nesting your constructor function into a IIFE and creating local variables in it' ],
    payload: [ "false", "false", "false", "false", "true" ] },
  { quest: 'String values have a “length” property. Why is this property not included in a for-in loop over a string object? var prop, str; str = ‘example’; /* str.length === 7 */ for ( prop in str) {}',
    title:
     [ 'Because the “length” property is only in the String prototype, it is not an own property of string objects, and as such is not included in a for-in loop.',
       'Because the “length” property has internal [[Enumerable]] set to "false".',
       'Because the “length” property isn’t a real property (defined and set through get/set accessors). Properties with accessors are not included in for-in loops.' ],
    payload: [ "false", "true", "false" ] },
  { quest: 'Which are the different value types in JavaScript?',
    title:
     [ 'boolean, integer, float, string, array, object and null',
       'boolean, number, string, function, object and undefined',
       'boolean, number, date, regexp, array and object',
       'boolean, number, string, function, object, null and undefined' ],
    payload: [ "false", "true", "false", "false" ] },
  { quest: 'What is the value of x? var a = “abc”; var x = a instanceof String;',
    title: [ '"true"', '"false"' ],
    payload: [ "false", "true" ] },
  { quest: 'What’s the correct syntax for creating a Date object for January 10, 1998?',
    title:
     [ 'new Date(1, 10, 1998);',
       'new Date(0, 10, 1998);',
       'new Date(1998, 0, 10);',
       'new Date(1998, 1, 10);' ],
    payload: [ "false", "false", "true", "false" ] }
  ]
